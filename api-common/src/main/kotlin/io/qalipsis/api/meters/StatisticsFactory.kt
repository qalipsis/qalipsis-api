/*
 * Copyright 2024 AERIS IT Solutions GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package io.qalipsis.api.meters

import java.time.Instant

/**
 * Module to manage global meter statistics, generated by a campaign.
 *
 * @author Francisca Eze
 */
interface StatisticsFactory {

    /**
     * Creates a new [Counter] metric to be added to the registry. This metric measures the
     * count of specific events collected over time.
     *
     * @param name the name of the counter metric
     * @param tags additional key-value pairs to associate with the counter metric
     *
     * @sample counterExample
     */
    fun counter(name : String, tags : Map<String, String>) : Counter

    /**
     * Creates a new [Timer] metric to be added to the registry. This metric measures the duration of an operation or a task.
     *
     * @param name the name of the timer metric
     * @param tags additional key-value pairs to associate with the timer metric
     * @param percentiles a list of values within the range of 1.0-100.0, representing specific points of observation, defaults to an empty set
     *
     * @sample timerExample
     */
    fun timer(name : String, percentiles: Set<Double> = emptySet(), tags : Map<String, String>) : Timer

    /**
     * Creates a new [Gauge] metric to be added to the registry. This metric tracks instantaneous values
     * change over time.
     *
     * @param name the name of the gauge metric
     * @param tags additional key-value pairs to associate with the gauge metric
     *
     * @sample gaugeExample
     */
    fun gauge(name : String, tags : Map<String, String>) : Gauge

    /**
     * Creates a new [DistributionSummary] metric to be added to the registry. This metric
     * provides statistical data about the values observed/collected from an operation.
     *
     * @param name the name of the summary metric
     * @param percentiles a list of values within the range of 1.0-100.0, representing specific points of observation, defaults to an empty set
     * @param tags additional key-value pairs to associate with the summary metric
     *
     * @sample summaryExample
     */
    fun summary(name : String, percentiles: Set<Double> = emptySet(), tags : Map<String, String>) : DistributionSummary

    /**
     * Creates a new [Statistics] metric to be added to the registry. This metric
     * provides the global statistical data about the values observed/collected from an operation.
     *
     * @param name the name of the summary metric
     * @param percentiles a list of values within the range of 1.0-100.0, representing specific points of observation, defaults to an empty set
     * @param tags additional key-value pairs to associate with the summary metric
     *
     * @sample statisticsExample
     */
    fun statistics(name : String, percentiles: Set<Double> = emptySet(), tags : Map<String, String>) : Statistics

    /**
     * Returns a summary snapshot of the measurements collected for each meter for a given step.
     */
    suspend fun createSnapshots(instant: Instant) : Collection<MeterSnapshot<*>>

    /**
     * Deletes the created meters.
     */
    fun clear()

    /**
     * Example usage of the `counter` function with tags.
     */
    private fun counterExample() {
        counter(
            name = "counter name",
            tags = mapOf("foo" to "bar", "scenario" to "sample-scenario-name", "step" to "step-name")
        )
    }

    /**
     * Example usage of the `gauge` function with tags.
     */
    private fun gaugeExample() {
        gauge(
            name = "gauge name",
            tags = mapOf("tag-1" to "value-1", "tag-2" to "value-2"),
        )
    }

    /**
     * Example usage of the `timer` function with tags.
     */
    private fun timerExample() {
        timer(
            name = "http-requests duration",
            tags = mapOf("environment" to "production", "region" to "us-west", "step" to "step-name"),
            percentiles = setOf(25.0, 75.0, 99.0) // Defaults to an emptySet().
        )
    }

    /**
     * Example usage of the `summary` function with tags.
     */
    private fun summaryExample() {
        summary(
            name = "requests Summary",
            tags = mapOf("foo" to "bar", "region" to "us-east", "step" to "step-name"),
            percentiles = setOf(99.0, 75.0) // Defaults to an emptySet().
        )
    }

    /**
     * Example usage of the `statistics` function with tags.
     */
    private fun statisticsExample() {
        statistics(
            name = "global-statistics",
            tags = mapOf("environment" to "production", "region" to "us-west", "step" to "campaign-stats"),
            percentiles = setOf(99.0, 75.0) // Defaults to an emptySet().
        )
    }

}